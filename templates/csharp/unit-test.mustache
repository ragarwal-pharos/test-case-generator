using System;
using Xunit;
using Moq;
using FluentAssertions;
using Microsoft.AspNetCore.Mvc;
{{#usings}}
using {{.}};
{{/usings}}

namespace {{namespace}}.Tests
{
    /// <summary>
    /// Unit tests for {{className}}
    /// Generated by Test Case Generator on {{generatedDate}}
    /// </summary>
    public class {{className}}Tests
    {
        private readonly {{className}} _sut;
        {{#dependencies}}
        private readonly Mock<{{type}}> _{{name}}Mock;
        {{/dependencies}}

        public {{className}}Tests()
        {
            // Arrange - Setup mocks and dependencies
            {{#dependencies}}
            _{{name}}Mock = new Mock<{{type}}>();
            {{/dependencies}}
            
            _sut = new {{className}}({{#dependencies}}_{{name}}Mock.Object{{#hasNext}}, {{/hasNext}}{{/dependencies}});
        }

        {{#methods}}
        /// <summary>
        /// Test for {{name}} method
        /// </summary>
        {{#testCases}}
        [Fact]
        public {{#isAsync}}async Task{{/isAsync}}{{^isAsync}}void{{/isAsync}} {{name}}_{{scenario}}_{{expectedResult}}()
        {
            // Arrange
            {{#arrangeCode}}
            {{.}}
            {{/arrangeCode}}
            {{#mockSetup}}
            {{.}}
            {{/mockSetup}}

            // Act
            {{#isAsync}}var result = await {{/isAsync}}{{^isAsync}}var result = {{/isAsync}}_sut.{{methodName}}({{#parameters}}{{value}}{{#hasNext}}, {{/hasNext}}{{/parameters}});

            // Assert
            {{#assertions}}
            {{.}}
            {{/assertions}}
            {{#mockVerifications}}
            {{.}}
            {{/mockVerifications}}
        }

        {{/testCases}}
        {{/methods}}

        {{#hasProperties}}
        #region Property Tests
        
        {{#properties}}
        [Fact]
        public void {{name}}_Should_GetAndSet_Correctly()
        {
            // Arrange
            var expected{{name}} = {{testValue}};

            // Act
            _sut.{{name}} = expected{{name}};
            var actual{{name}} = _sut.{{name}};

            // Assert
            actual{{name}}.Should().Be(expected{{name}});
        }

        {{/properties}}
        #endregion
        {{/hasProperties}}

        {{#hasConstructors}}
        #region Constructor Tests

        {{#constructors}}
        [Fact]
        public void Constructor_{{scenario}}_{{expectedResult}}()
        {
            // Arrange
            {{#arrangeCode}}
            {{.}}
            {{/arrangeCode}}

            // Act
            {{#expectsException}}
            Action act = () => new {{className}}({{#parameters}}{{value}}{{#hasNext}}, {{/hasNext}}{{/parameters}});

            // Assert
            act.Should().Throw<{{exceptionType}}>();
            {{/expectsException}}
            {{^expectsException}}
            var result = new {{className}}({{#parameters}}{{value}}{{#hasNext}}, {{/hasNext}}{{/parameters}});

            // Assert
            result.Should().NotBeNull();
            {{#assertions}}
            {{.}}
            {{/assertions}}
            {{/expectsException}}
        }

        {{/constructors}}
        #endregion
        {{/hasConstructors}}
    }
}
