using System;
using Xunit;
using Moq;
using FluentAssertions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
{{#usings}}
using {{.}};
{{/usings}}

namespace {{namespace}}.Tests
{
    /// <summary>
    /// Unit tests for {{controllerName}} controller
    /// Generated by Test Case Generator on {{generatedDate}}
    /// </summary>
    public class {{controllerName}}Tests
    {
        private readonly {{controllerName}} _controller;
        {{#dependencies}}
        private readonly Mock<{{type}}> _{{name}}Mock;
        {{/dependencies}}

        public {{controllerName}}Tests()
        {
            // Arrange - Setup mocks and dependencies
            {{#dependencies}}
            _{{name}}Mock = new Mock<{{type}}>();
            {{/dependencies}}
            
            _controller = new {{controllerName}}({{#dependencies}}_{{name}}Mock.Object{{#hasNext}}, {{/hasNext}}{{/dependencies}});
            
            // Setup controller context
            _controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext()
            };
        }

        {{#actions}}
        #region {{name}} Action Tests

        {{#testCases}}
        [Fact]
        public {{#isAsync}}async Task{{/isAsync}}{{^isAsync}}void{{/isAsync}} {{name}}_{{scenario}}_{{expectedResult}}()
        {
            // Arrange
            {{#arrangeCode}}
            {{.}}
            {{/arrangeCode}}
            {{#mockSetup}}
            {{.}}
            {{/mockSetup}}

            // Act
            {{#isAsync}}var result = await {{/isAsync}}{{^isAsync}}var result = {{/isAsync}}_controller.{{actionName}}({{#parameters}}{{value}}{{#hasNext}}, {{/hasNext}}{{/parameters}});

            // Assert
            {{#expectedResultType}}
            result.Should().BeOfType<{{.}}>();
            {{/expectedResultType}}
            {{#expectedStatusCode}}
            var {{resultType}} = result as {{resultType}};
            {{resultType}}.StatusCode.Should().Be({{.}});
            {{/expectedStatusCode}}
            {{#expectedModel}}
            var okResult = result as OkObjectResult;
            okResult.Value.Should().BeOfType<{{.}}>();
            {{/expectedModel}}
            {{#customAssertions}}
            {{.}}
            {{/customAssertions}}
            {{#mockVerifications}}
            {{.}}
            {{/mockVerifications}}
        }

        {{/testCases}}

        {{#hasValidation}}
        [Theory]
        {{#validationTestData}}
        [InlineData({{.}})]
        {{/validationTestData}}
        public {{#isAsync}}async Task{{/isAsync}}{{^isAsync}}void{{/isAsync}} {{name}}_WithInvalidModel_ReturnsBadRequest({{#parameters}}{{type}} {{name}}{{#hasNext}}, {{/hasNext}}{{/parameters}})
        {
            // Arrange
            _controller.ModelState.AddModelError("{{validationField}}", "{{validationMessage}}");

            // Act
            {{#isAsync}}var result = await {{/isAsync}}{{^isAsync}}var result = {{/isAsync}}_controller.{{actionName}}({{#parameters}}{{name}}{{#hasNext}}, {{/hasNext}}{{/parameters}});

            // Assert
            result.Should().BeOfType<BadRequestObjectResult>();
        }
        {{/hasValidation}}

        #endregion

        {{/actions}}

        {{#hasAuthorizationTests}}
        #region Authorization Tests

        [Fact]
        public void Controller_ShouldHave_AuthorizeAttribute()
        {
            // Arrange & Act
            var authorizeAttributes = typeof({{controllerName}})
                .GetCustomAttributes(typeof(AuthorizeAttribute), false);

            // Assert
            authorizeAttributes.Should().NotBeEmpty();
        }

        {{#protectedActions}}
        [Fact]
        public void {{name}}_ShouldHave_AuthorizeAttribute()
        {
            // Arrange & Act
            var method = typeof({{../controllerName}}).GetMethod("{{name}}");
            var authorizeAttributes = method.GetCustomAttributes(typeof(AuthorizeAttribute), false);

            // Assert
            authorizeAttributes.Should().NotBeEmpty();
        }
        {{/protectedActions}}

        #endregion
        {{/hasAuthorizationTests}}

        {{#hasModelBindingTests}}
        #region Model Binding Tests

        {{#modelBindingTests}}
        [Fact]
        public void {{actionName}}_ShouldBind_{{parameterName}}_From{{bindingSource}}()
        {
            // Arrange & Act
            var method = typeof({{../controllerName}}).GetMethod("{{actionName}}");
            var parameter = method.GetParameters().FirstOrDefault(p => p.Name == "{{parameterName}}");
            var bindingAttribute = parameter?.GetCustomAttribute<{{bindingAttribute}}>();

            // Assert
            bindingAttribute.Should().NotBeNull();
        }
        {{/modelBindingTests}}

        #endregion
        {{/hasModelBindingTests}}
    }
}
