<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestCaseGenerator.Generators</name>
    </assembly>
    <members>
        <member name="T:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator">
            <summary>
            Generates C# test cases using xUnit, NUnit, or MSTest frameworks
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.CreateTestFilePathWithStructure(System.String,System.String,System.String)">
            <summary>
            Creates a test file path that preserves the source project structure
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.FindProjectRoot(System.String)">
            <summary>
            Finds the project root directory by looking for project files
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.CleanupOldTestFolderAsync(System.String)">
            <summary>
            Cleans up old test folder to prevent duplicates when re-running
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.GenerateTestFilesAsync(System.Collections.Generic.IEnumerable{TestCaseGenerator.Core.Models.AnalysisResult},System.String,System.Threading.CancellationToken)">
            <summary>
            Generates test files based on analysis results with improved folder structure and cleanup
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.GenerateTestFileAsync(TestCaseGenerator.Core.Models.AnalysisResult,System.Collections.Generic.List{TestCaseGenerator.Core.Models.TestCase},System.String,System.Threading.CancellationToken)">
            <summary>
            Generates a complete test file for the given analysis result
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.GenerateTestClassAsync(TestCaseGenerator.Core.Models.ClassInfo,System.Collections.Generic.List{TestCaseGenerator.Core.Models.TestCase},TestCaseGenerator.Core.Models.AnalysisResult,System.Threading.CancellationToken)">
            <summary>
            Generates a test class using templates
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.CreateTemplateData(TestCaseGenerator.Core.Models.ClassInfo,System.Collections.Generic.List{TestCaseGenerator.Core.Models.TestCase},TestCaseGenerator.Core.Models.AnalysisResult)">
            <summary>
            Creates template data for rendering test classes
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.GenerateMethodTestCasesAsync(TestCaseGenerator.Core.Models.ClassInfo,TestCaseGenerator.Core.Models.MethodInfo,TestCaseGenerator.Core.Models.AnalysisResult,System.Threading.CancellationToken)">
            <summary>
            Generates test cases for a method
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.GenerateConstructorTestCasesAsync(TestCaseGenerator.Core.Models.ClassInfo,TestCaseGenerator.Core.Models.ConstructorInfo,TestCaseGenerator.Core.Models.AnalysisResult,System.Threading.CancellationToken)">
            <summary>
            Generates test cases for a constructor
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.GeneratePropertyTestCasesAsync(TestCaseGenerator.Core.Models.ClassInfo,TestCaseGenerator.Core.Models.PropertyInfo,TestCaseGenerator.Core.Models.AnalysisResult,System.Threading.CancellationToken)">
            <summary>
            Generates test cases for a property
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.CreateMethodTestCase(TestCaseGenerator.Core.Models.ClassInfo,TestCaseGenerator.Core.Models.MethodInfo,System.String,System.String,TestCaseGenerator.Core.Models.AnalysisResult,TestCaseGenerator.Core.Models.TestType)">
            <summary>
            Creates a test case for a method
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.CreateConstructorTestCase(TestCaseGenerator.Core.Models.ClassInfo,TestCaseGenerator.Core.Models.ConstructorInfo,System.String,System.String,TestCaseGenerator.Core.Models.AnalysisResult)">
            <summary>
            Creates a test case for a constructor
            </summary>
        </member>
        <member name="M:TestCaseGenerator.Generators.CSharp.CSharpTestGenerator.CreatePropertyTestCase(TestCaseGenerator.Core.Models.ClassInfo,TestCaseGenerator.Core.Models.PropertyInfo,System.String,System.String,TestCaseGenerator.Core.Models.AnalysisResult)">
            <summary>
            Creates a test case for a property
            </summary>
        </member>
    </members>
</doc>
