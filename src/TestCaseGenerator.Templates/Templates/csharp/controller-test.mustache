{{#usings}}
using {{{.}}};
{{/usings}}

namespace {{{namespace}}}.Tests
{
    /// <summary>
    /// Controller tests for {{{className}}}
    /// Generated by Test Case Generator on {{{generatedDate}}}
    /// </summary>
    public class {{{className}}}Tests
    {
        private readonly {{{className}}} _controller;
        private readonly Mock<ILogger<{{{className}}}>> _loggerMock;
        {{#dependencies}}
        private readonly Mock<{{{type}}}> _{{{name}}}Mock;
        {{/dependencies}}

        public {{{className}}}Tests()
        {
            // Arrange - Setup mocks and dependencies
            _loggerMock = new Mock<ILogger<{{{className}}}>>();
            {{#dependencies}}
            _{{{name}}}Mock = new Mock<{{{type}}}>();
            {{/dependencies}}
            
            _controller = new {{{className}}}(_loggerMock.Object{{#dependencies}}, _{{{name}}}Mock.Object{{/dependencies}});
        }

        {{#methods}}
        /// <summary>
        /// Test for {{{name}}} action method
        /// </summary>
        {{#testCases}}
        [Fact]
        public {{#isAsync}}async Task{{/isAsync}}{{^isAsync}}void{{/isAsync}} {{{name}}}_{{{scenario}}}_{{{expectedResult}}}()
        {
            // Arrange
            {{#arrangeCode}}
            {{{.}}}
            {{/arrangeCode}}
            {{#mockSetup}}
            {{{.}}}
            {{/mockSetup}}

            // Act
            {{#isAsync}}var result = await {{/isAsync}}{{^isAsync}}var result = {{/isAsync}}_controller.{{{methodName}}}({{#parameters}}{{{value}}}{{#hasNext}}, {{/hasNext}}{{/parameters}});

            // Assert
            {{#assertions}}
            {{{.}}}
            {{/assertions}}
            {{^assertions}}
            result.Should().NotBeNull();
            {{#isActionResult}}
            result.Should().BeOfType<{{{expectedType}}}>();
            {{/isActionResult}}
            {{/assertions}}
            
            {{#verifyMocks}}
            {{{.}}}
            {{/verifyMocks}}
        }

        {{/testCases}}
        {{/methods}}

        {{#additionalTests}}
        /// <summary>
        /// {{{description}}}
        /// </summary>
        [Fact]
        public {{#isAsync}}async Task{{/isAsync}}{{^isAsync}}void{{/isAsync}} {{{name}}}()
        {
            // Arrange
            {{#arrangeCode}}
            {{{.}}}
            {{/arrangeCode}}

            // Act
            {{#actCode}}
            {{{.}}}
            {{/actCode}}

            // Assert
            {{#assertions}}
            {{{.}}}
            {{/assertions}}
        }

        {{/additionalTests}}
    }
}
